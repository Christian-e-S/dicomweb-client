{"version":3,"file":"dicomweb-client.js","sources":["../src/message.js","../src/api.js","../src/utils.js","../src/version.js","../src/dicomweb-client.js"],"sourcesContent":["/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr, offset, limit) {\n  offset = offset || 0;\n  limit = limit || arr.length - offset;\n  let str = '';\n  for (let i = offset; i < offset + limit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\nfunction stringToUint8Array(str) {\n  const arr = new Uint8Array(str.length);\n  for (let i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n\n\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\nfunction identifyBoundary(header) {\n  const parts = header.split('\\r\\n');\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n}\n\n\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {String} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\nfunction containsToken(message, token, offset=0) {\n  if (message + token.length > message.length) {\n    return false;\n  }\n\n  let index = offset;\n  for (let i = 0; i < token.length; i++) {\n    if (token[i] !== message[index++]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\nfunction findToken(message, token, offset=0) {\n  const messageLength = message.length;\n\n  for (let i = offset; i < messageLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part of the multipart body. If this is not specified, a random GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This contains both the data itself, and the boundary string used to divide it.\n */\nfunction multipartEncode(datasets, boundary=guid(), contentType='application/dicom') {\n  const contentTypeString = `Content-Type: ${contentType}`;\n  const header = `\\r\\n--${boundary}\\r\\n${contentTypeString}\\r\\n\\r\\n`;\n  const footer = `\\r\\n--${boundary}--`;\n  const headerArray = stringToUint8Array(header);\n  const footerArray = stringToUint8Array(footer);\n  const headerLength = headerArray.length;\n  const footerLength = footerArray.length;\n\n  let length = 0;\n\n  // Calculate the total length for the final array\n  const contentArrays = datasets.map(datasetBuffer => {\n    const contentArray = new Uint8Array(datasetBuffer);\n    const contentLength = contentArray.length;\n\n    length += headerLength + contentLength + footerLength;\n\n    return contentArray;\n  })\n\n  // Allocate the array\n  const multipartArray = new Uint8Array(length);\n\n  // Set the initial header\n  multipartArray.set(headerArray, 0);\n\n  // Write each dataset into the multipart array\n  let position = 0;\n  contentArrays.forEach(contentArray => {\n    const contentLength = contentArray.length;\n\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n\n    position += headerLength + contentArray.length;\n  });\n\n  multipartArray.set(footerArray, position);\n\n  return {\n    data: multipartArray.buffer,\n    boundary\n  };\n};\n\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\nfunction multipartDecode(response) {\n    const message = new Uint8Array(response);\n\n    // First look for the multipart mime header\n    const separator = stringToUint8Array('\\r\\n\\r\\n');\n    const headerIndex = findToken(message, separator);\n    if (headerIndex === -1) {\n      throw new Error('Response message has no multipart mime header');\n    }\n\n    const header = uint8ArrayToString(message, 0, headerIndex);\n    const boundaryString = identifyBoundary(header);\n    if (!boundaryString) {\n      throw new Error('Header of response message does not specify boundary');\n    }\n\n    const boundary = stringToUint8Array(boundaryString);\n    const boundaryLength = boundary.length;\n    const components = [];\n    let offset = headerIndex + separator.length;\n\n    // Loop until we cannot find any more boundaries\n    let boundaryIndex;\n\n    while (boundaryIndex !== -1) {\n      // Search for the next boundary in the message, starting\n      // from the current offset position\n      boundaryIndex = findToken(message, boundary, offset);\n\n      // If no further boundaries are found, stop here.\n      if (boundaryIndex === -1) {\n        break;\n      }\n\n      // Extract data from response message, excluding \"\\r\\n\"\n      const spacingLength = 2;\n      const length = boundaryIndex - offset - spacingLength;\n      const data = response.slice(offset, offset + length);\n\n      // Add the data to the array of results\n      components.push(data);\n\n      // Move the offset to the end of the current section,\n      // plus the identified boundary\n      offset += length + spacingLength + boundaryLength;\n    }\n\n    return components;\n}\n\n/**\n * Create a random GUID\n *\n * @return {string}\n */\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nexport {\n  containsToken,\n  findToken,\n  identifyBoundary,\n  uint8ArrayToString,\n  stringToUint8Array,\n  multipartEncode,\n  multipartDecode,\n  guid,\n};\n","import {\n  containsToken,\n  findToken,\n  identifyBoundary,\n  uint8ArrayToString,\n  stringToUint8Array,\n  multipartEncode,\n  multipartDecode\n} from './message.js';\n\nfunction isEmptyObject (obj) {\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nconst getFirstResult = result => result[0];\n\nconst MIMETYPES = {\n  DICOM: 'application/dicom',\n  DICOM_JSON: 'application/dicom+json',\n  OCTET_STREAM: 'application/octet-stream'\n};\n\n/**\n* Class for interacting with DICOMweb RESTful services.\n*/\nclass DICOMwebClient {\n\n  /**\n  * @constructor\n  * @param {Object} options (choices: \"url\", \"username\", \"password\", \"headers\")\n  */\n  constructor(options) {\n\n    this.baseURL = options.url;\n    if (!this.baseURL) {\n      console.error('DICOMweb base url provided - calls will fail')\n    }\n\n    if ('username' in options) {\n      this.username = options.username;\n      if (!('password' in options)) {\n        console.error('no password provided to authenticate with DICOMweb service')\n      }\n      this.password = options.password;\n    }\n\n    this.headers = options.headers || {};\n  }\n\n  static _parseQueryParameters(params={}) {\n    let queryString = '?';\n    Object.keys(params).forEach(function (key, index) {\n      if (index !== 0) {\n        queryString += '&'\n      }\n      queryString += key + '=' + encodeURIComponent(params[key]);\n    });\n    return queryString\n  }\n\n  _httpRequest(url, method, headers, options={}) {\n    return new Promise( (resolve, reject) => {\n      const request = new XMLHttpRequest();\n      request.open(method, url, true);\n      if ('responseType' in options) {\n        request.responseType = options.responseType;\n      }\n\n      if (typeof(headers) === 'object') {\n        Object.keys(headers).forEach(function (key) {\n          request.setRequestHeader(key, headers[key]);\n        });\n      }\n\n      // now add custom headers from the user\n      // (e.g. access tokens)\n      const userHeaders = this.headers;\n      Object.keys(userHeaders).forEach(function (key) {\n        request.setRequestHeader(key, userHeaders[key]);\n      });\n\n      // Event triggered when upload starts\n      request.onloadstart = function (event) {\n        //console.log('upload started: ', url)\n      };\n\n      // Event triggered when upload ends\n      request.onloadend = function (event) {\n        //console.log('upload finished')\n      };\n\n      // Handle response message\n      request.onreadystatechange = function (event) {\n        if (request.readyState === 4) {\n          if (request.status === 200) {\n            resolve(request.response);\n          } else if (request.status === 202) {\n            console.warn('some resources already existed: ', request);\n            resolve(request.response);\n          } else if (request.status === 204) {\n            console.warn('empty response for request: ', request);\n            resolve([]);\n          } else {\n            console.error('request failed: ', request);\n            const error = new Error('request failed');\n            error.request = request;\n            error.response = request.response;\n            error.status = request.status;\n            console.error(error);\n            console.error(error.response);\n\n            reject(error);\n          }\n        }\n      };\n\n      // Event triggered while download progresses\n      if ('progressCallback' in options) {\n        if (typeof(options.progressCallback) === 'function') {\n          request.onprogress = options.progressCallback;\n        }\n      }\n\n      // request.onprogress = function (event) {\n      //   const loaded = progress.loaded;\n      //   let total;\n      //   let percentComplete;\n      //   if (progress.lengthComputable) {\n      //     total = progress.total;\n      //     percentComplete = Math.round((loaded / total) * 100);\n      //   j\n      //   // console.log('download progress: ', percentComplete, ' %');\n      //   return(percentComplete);\n      // };\n\n      if ('data' in options) {\n        request.send(options.data);\n      } else {\n        request.send();\n      }\n    });\n  }\n\n  _httpGet(url, headers, responseType, progressCallback) {\n    return this._httpRequest(url, 'get', headers, {responseType, progressCallback});\n  }\n\n  _httpGetApplicationJson(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': MIMETYPES.DICOM_JSON};\n    const responseType = 'json';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpGetByMimeType(url, mimeType, params, responseType='arraybuffer', progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n        url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n\n    const headers = {\n      'Accept': `multipart/related; type=\"${mimeType}\"`\n    };\n\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpPost(url, headers, data, progressCallback) {\n    return this._httpRequest(url, 'post', headers, {data, progressCallback});\n  }\n\n  _httpPostApplicationJson(url, data, progressCallback) {\n    const headers = {'Content-Type': MIMETYPES.DICOM_JSON};\n    return this._httpPost(url, headers, data, progressCallback);\n  }\n\n  /**\n   * Searches for DICOM studies.\n   * @param {Object} options options object - \"queryParams\" optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n   * @return {Array} study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n   */\n  searchForStudies(options={}) {\n    console.log('search for studies');\n    let url = this.baseURL +\n              '/studies';\n    if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM study.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the study\n   */\n  retrieveStudyMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of study metadata')\n    }\n    console.log(`retrieve metadata of study ${options.studyInstanceUID}`);\n    const url = this.baseURL +\n              '/studies/' + options.studyInstanceUID +\n              '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Searches for DICOM series.\n   * @param {Object} options optional DICOM identifiers (choices: \"studyInstanceUID\")\n   * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n   * @returns {Array} series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n   */\n  searchForSeries(options={}) {\n    let url = this.baseURL;\n    if ('studyInstanceUID' in options) {\n      console.log(`search series of study ${options.studyInstanceUID}`);\n      url += '/studies/' + options.studyInstanceUID;\n    }\n    url += '/series';\n    if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM series.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the series\n   */\n  retrieveSeriesMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of series metadata')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of series metadata')\n    }\n\n    console.log(`retrieve metadata of series ${options.seriesInstanceUID}`);\n    const url = this.baseURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Searches for DICOM instances.\n   * @param {Object} options optional DICOM identifiers (choices: \"studyInstanceUID\", \"seriesInstanceUID\")\n   * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n   * @returns {Array} instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n   */\n  searchForInstances(options={}) {\n    let url = this.baseURL;\n    if ('studyInstanceUID' in options) {\n      url += '/studies/' + options.studyInstanceUID;\n      if ('seriesInstanceUID' in options) {\n        console.log(`search for instances of series ${options.seriesInstanceUID}`);\n        url += '/series/' + options.seriesInstanceUID;\n      } else {\n        console.log(`search for instances of study ${options.studyInstanceUID}`);\n      }\n    } else {\n     console.log('search for instances');\n    }\n    url += '/instances';\n    if ('queryParams' in options) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /** Returns a WADO-URI URL for an instance\n   *\n   * @param {Object} options\n   * @returns {String} WADO-URI URL\n   */\n  buildInstanceWadoURIUrl(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required.')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required.')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required.')\n    }\n\n    const contentType = options.contentType || MIMETYPES.DICOM;\n    const transferSyntax = options.transferSyntax || '*';\n    const params = [];\n\n    params.push('requestType=WADO');\n    params.push(`studyUID=${options.studyInstanceUID}`);\n    params.push(`seriesUID=${options.seriesInstanceUID}`);\n    params.push(`objectUID=${options.sopInstanceUID}`);\n    params.push(`contentType=${contentType}`);\n    params.push(`transferSyntax=${transferSyntax}`);\n\n    const paramString = params.join('&');\n\n    return `${this.baseURL}?${paramString}`;\n  }\n\n  /**\n   * Retrieves metadata for a DICOM instance.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @param {String} sopInstanceUID SOP Instance UID\n   * @returns {Object} metadata elements in DICOM JSON format\n   */\n  retrieveInstanceMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required for retrieval of instance metadata')\n    }\n    console.log(`retrieve metadata of instance ${options.sopInstanceUID}`);\n    const url = this.baseURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID +\n      '/metadata';\n\n    return this._httpGetApplicationJson(url);\n  }\n\n  /**\n   * Retrieves frames for a DICOM instance.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @param {String} sopInstanceUID SOP Instance UID\n   * @param {Array} frameNumbers one-based index of frames\n   * @param {Object} options optional parameters (key \"imageSubtype\" to specify MIME image subtypes)\n   * @returns {Array} frame items as byte arrays of the pixel data element\n   */\n  retrieveInstanceFrames(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required for retrieval of instance metadata')\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error('frame numbers are required for retrieval of instance frames')\n    }\n    console.log(`retrieve frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`)\n    const url = this.baseURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID +\n      '/frames/' + options.frameNumbers.toString();\n\n\n    // TODO: Easier if user just provided mimetype directly? What is the benefit of adding 'image/'?\n    const mimeType = options.imageSubType ? `image/${options.imageSubType}` : MIMETYPES.OCTET_STREAM;\n\n    return this._httpGetByMimeType(url, mimeType).then(multipartDecode);\n  }\n\n  /**\n   * Retrieves a DICOM instance.\n   *\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @param {String} sopInstanceUID SOP Instance UID\n   * @returns {Arraybuffer} DICOM Part 10 file as Arraybuffer\n   */\n  retrieveInstance(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required')\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required')\n    }\n    const url = this.baseURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID +\n      '/instances/' + options.sopInstanceUID;\n\n    return this._httpGetByMimeType(url, MIMETYPES.DICOM)\n        .then(multipartDecode)\n        .then(getFirstResult);\n  }\n\n  /**\n   * Retrieves a set of DICOM instance for a series.\n   *\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n   */\n  retrieveSeries(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required')\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required')\n    }\n    const url = this.baseURL +\n      '/studies/' + options.studyInstanceUID +\n      '/series/' + options.seriesInstanceUID;\n\n    return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n  }\n\n  /**\n   * Retrieves a set of DICOM instance for a study.\n   *\n   * @param {String} studyInstanceUID Study Instance UID\n   * @returns {Arraybuffer[]} Array of DICOM Part 10 files as Arraybuffers\n   */\n  retrieveStudy(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required')\n    }\n\n    const url = this.baseURL +\n      '/studies/' + options.studyInstanceUID;\n\n    return this._httpGetByMimeType(url, MIMETYPES.DICOM).then(multipartDecode);\n  }\n\n  /**\n   * Retrieve and parse BulkData from a BulkDataURI location.\n   * Decodes the multipart encoded data and returns the resulting data\n   * as an ArrayBuffer.\n   *\n   * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n   *\n   * @param {Object} options\n   * @return {Promise}\n   */\n  retrieveBulkData(options) {\n    if (!('BulkDataURI' in options)) {\n      throw new Error('BulkDataURI is required.');\n    }\n\n    return this._httpGetByMimeType(options.BulkDataURI, MIMETYPES.OCTET_STREAM)\n      .then(multipartDecode)\n      .then(getFirstResult);\n  }\n\n  /**\n   * Stores DICOM instances.\n   * @param {Array} datasets DICOM datasets of instances that should be stored in DICOM JSON format\n   * @param {Object} options optional parameters (key \"studyInstanceUID\" to only store instances of a given study)\n   */\n  storeInstances(options) {\n    if (!('datasets' in options)) {\n      throw new Error('datasets are required for storing')\n    }\n\n    let url = `${this.baseURL}/studies`;\n    if ('studyInstanceUID' in options) {\n      url += `/${options.studyInstanceUID}`;\n    }\n\n    const { data, boundary } = multipartEncode(options.datasets);\n    const headers = {\n      'Content-Type': `multipart/related; type=application/dicom; boundary=${boundary}`\n    };\n\n    return this._httpPost(url, headers, data, options.progressCallback);\n  }\n}\n\nexport { DICOMwebClient };\n","function findSubstring(str, before, after) {\n    const beforeIndex = str.lastIndexOf(before) + before.length;\n    if (beforeIndex < before.length) {\n        return(null);\n    }\n    if (after !== undefined) {\n        const afterIndex = str.lastIndexOf(after);\n        if (afterIndex < 0) {\n            return(null);\n        } else{\n            return(str.substring(beforeIndex, afterIndex));\n        }\n    }\n    return(str.substring(beforeIndex));\n}\n\n\nfunction getStudyInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, \"studies/\", \"/series\");\n  if (!uid) {\n    var uid = findSubstring(uri, \"studies/\");\n  }\n  if (!uid) {\n    console.debug('Study Instance UID could not be dertermined from URI \"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getSeriesInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, \"series/\", \"/instances\");\n  if (!uid) {\n    var uid = findSubstring(uri, \"series/\");\n  }\n  if (!uid) {\n    console.debug('Series Instance UID could not be dertermined from URI \"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getSOPInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, \"/instances/\", \"/frames\");\n  if (!uid) {\n    var uid = findSubstring(uri, \"/instances/\", \"/metadata\");\n  }\n  if (!uid) {\n    var uid = findSubstring(uri, \"/instances/\");\n  }\n  if (!uid) {\n    console.debug('SOP Instance UID could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getFrameNumbersFromUri(uri) {\n  let numbers = findSubstring(uri, \"/frames/\");\n  if (numbers === undefined) {\n    console.debug('Frames Numbers could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(numbers.split(','));\n}\n\nexport {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n};\n","export default '0.3.2';\n","import { DICOMwebClient } from './api.js';\nimport { \n  getStudyInstanceUIDFromUri, getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri, getFrameNumbersFromUri\n} from './utils.js';\n\nlet api = {\n  DICOMwebClient,\n};\nlet utils = {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri\n};\n\nexport { default as version } from './version.js';\n\nexport { api, utils };\n"],"names":["uint8ArrayToString","arr","offset","limit","length","str","i","String","fromCharCode","stringToUint8Array","Uint8Array","j","charCodeAt","identifyBoundary","header","parts","split","substr","containsToken","message","token","index","findToken","messageLength","multipartEncode","datasets","boundary","guid","contentType","contentTypeString","footer","headerArray","footerArray","headerLength","footerLength","contentArrays","map","datasetBuffer","contentArray","contentLength","multipartArray","set","position","forEach","data","buffer","multipartDecode","response","separator","headerIndex","Error","boundaryString","boundaryLength","components","boundaryIndex","spacingLength","slice","push","s4","Math","floor","random","toString","substring","isEmptyObject","obj","Object","keys","constructor","getFirstResult","result","MIMETYPES","DICOM","DICOM_JSON","OCTET_STREAM","DICOMwebClient","options","baseURL","url","console","error","username","password","headers","method","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","key","setRequestHeader","userHeaders","onloadstart","event","onloadend","onreadystatechange","readyState","status","warn","progressCallback","onprogress","send","_httpRequest","params","_parseQueryParameters","_httpGet","mimeType","_httpPost","log","queryParams","_httpGetApplicationJson","studyInstanceUID","seriesInstanceUID","transferSyntax","sopInstanceUID","paramString","join","frameNumbers","imageSubType","_httpGetByMimeType","then","BulkDataURI","queryString","encodeURIComponent","findSubstring","before","after","beforeIndex","lastIndexOf","undefined","afterIndex","getStudyInstanceUIDFromUri","uri","uid","debug","getSeriesInstanceUIDFromUri","getSOPInstanceUIDFromUri","getFrameNumbersFromUri","numbers","api","utils"],"mappings":"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"}