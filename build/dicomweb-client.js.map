{"version":3,"file":"dicomweb-client.js","sources":["../src/message.js","../src/api.js","../src/utils.js","../src/dicomweb-client.js"],"sourcesContent":["/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr, offset, limit) {\n  offset = offset || 0;\n  limit = limit || arr.length - offset;\n  let str = '';\n  for (let i = offset; i < offset + limit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\nfunction stringToUint8Array(str) {\n  const arr = new Uint8Array(str.length);\n  for (let i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n\n\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\nfunction identifyBoundary(header) {\n  const parts = header.split('\\r\\n');\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n}\n\n\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {String} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\nfunction containsToken(message, token, offset) {\n  if (message + token.length > message.length) {\n    return false;\n  }\n  let index = offset;\n  for (let i = 0; i < token.length; i++) {\n    if (token[i] !== message[index++]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\nfunction findToken(message, token, offset) {\n  offset = offset || 0;\n  for (let i = offset; i < message.length; i++) {\n    if (token[0] === message[i]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport { containsToken, findToken, identifyBoundary, uint8ArrayToString, stringToUint8Array };\n","import {\n  containsToken, findToken, identifyBoundary,\n  uint8ArrayToString, stringToUint8Array\n} from './message.js';\n\nfunction isEmptyObject (obj) {\n    return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\n/**\n* Class for interacting with DICOMweb RESTful services.\n*/\nclass DICOMwebClient {\n\n  /**\n  * @constructor\n  * @param {Object} options (choices: \"url\", \"username\", \"password\")\n  */\n  constructor(options) {\n    this.baseURL = options.url;\n    if ('username' in options) {\n      this.username = options.username;\n      if (!('password' in options)) {\n        console.error('no password provided to authenticate with DICOMweb service')\n      }\n      this.password = options.password;\n    }\n  }\n\n  static _parseQueryParameters(params={}) {\n    let queryString = '?';\n    Object.keys(params).forEach(function (key, index) {\n      if (index !== 0) {\n        queryString += '&'\n      }\n      queryString += key + '=' + window.encodeURIComponent(params[key]);\n    });\n    return queryString\n  }\n\n  _httpRequest(url, method, headers, responseType, progressCallback) {\n    return new Promise( (resolve, reject) => {\n      const request = new XMLHttpRequest();\n      request.open(method, url, true);\n      request.responseType = responseType;\n\n      if (typeof(headers) === 'object') {\n        Object.keys(headers).forEach(function (key) {\n          request.setRequestHeader(key, headers[key]);\n        });\n      }\n\n      // Event triggered when upload starts\n      request.onloadstart = function (event) {\n        // console.log('upload started: ', url)\n      };\n\n      // Event triggered when upload ends\n      request.onloadend = function (event) {\n        // console.log('upload finished')\n      };\n\n      // Handle response message\n      request.onreadystatechange = function (event) {\n        if (request.readyState === 4) {\n          if (request.status === 200) {\n            resolve(request.response);\n          } else if (request.status === 202) {\n            console.warn('some resources already existed: ', request);\n            resolve(request.response);\n          } else if (request.status === 204) {\n            console.warn('empty response for request: ', request);\n            resolve([]);\n          } else {\n            console.error('request failed: ', request);\n            reject(request);\n          }\n        }\n      };\n\n      // Event triggered while download progresses\n      if (typeof(progressCallback) === 'function') {\n          request.onprogress = progressCallback();\n      }\n\n      // request.onprogress = function (event) {\n      //   const loaded = progress.loaded;\n      //   let total;\n      //   let percentComplete;\n      //   if (progress.lengthComputable) {\n      //     total = progress.total;\n      //     percentComplete = Math.round((loaded / total) * 100);\n      //   j\n      //   // console.log('download progress: ', percentComplete, ' %');\n      //   return(percentComplete);\n      // };\n\n      request.send();\n    });\n  }\n\n  _httpGet(url, headers, responseType, progressCallback) {\n    return this._httpRequest(url, 'get', headers, responseType, progressCallback);\n  }\n\n  _httpGetApplicationJson(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': 'application/dicom+json'};\n    const responseType = 'json';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpGetApplicationOctetStream(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': 'multipart/related; type=\"application/octet-stream\"'};\n    const responseType = 'arraybuffer';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpGetImageJpeg(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': 'multipart/related; type=\"image/jpeg\"'};\n    const responseType = 'arraybuffer';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpGetImageJpeg2000(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': 'multipart/related; type=\"image/jp2\"'};\n    const responseType = 'arraybuffer';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpGetImageJpegLs(url, params={}, progressCallback) {\n    if (typeof(params) === 'object') {\n      if (!isEmptyObject(params)) {\n          url += DICOMwebClient._parseQueryParameters(params)\n      }\n    }\n    const headers = {'Accept': 'multipart/related; type=\"image/x-jls\"'};\n    const responseType = 'arraybuffer';\n    return this._httpGet(url, headers, responseType, progressCallback);\n  }\n\n  _httpPost(url, headers, responseType, progressCallback) {\n    return this._httpRequest(url, 'post', headers, responseType, progressCallback);\n  }\n\n  _httpPostApplicationDicom(url, progressCallback) {\n    const headers = {\n      'Content-Type': 'application/dicom',\n      'Accept': 'application/dicom+json'\n    };\n    const responseType = 'json';\n    return this._httpPost(url, headers, responseType, progressCallback);\n  }\n\n  /**\n   * Searches for DICOM studies.\n   * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n   * @return {Array} study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n   */\n  searchForStudies(queryParams={}) {\n    console.log('search for studies');\n    let url = this.baseURL +\n              '/studies';\n    if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM study.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the study\n   */\n  retrieveStudyMetadata(studyInstanceUID, queryParams={}) {\n    console.log(`retrieve metadata of study ${studyInstanceUID}`);\n    const url = this.baseURL +\n              '/studies/' + studyInstanceUID +\n              '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Searches for DICOM series.\n   * @param {Object} options optional DICOM identifiers (choices: \"studyInstanceUID\")\n   * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n   * @returns {Array} series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n   */\n  searchForSeries(options={}, queryParams={}) {\n    console.log(`search series of study ${options.studyInstanceUID}`);\n    let url = this.baseURL;\n    if ('studyInstanceUID' in options) {\n        url += '/studies/' + options.studyInstanceUID;\n    }\n    url += '/series';\n    if (options.queryParams) {\n        url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM series.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @returns {Array} metadata elements in DICOM JSON format for each instance belonging to the series\n   */\n  retrieveSeriesMetadata(studyInstanceUID, seriesInstanceUID) {\n    console.log(`retrieve metadata of series ${seriesInstanceUID}`);\n    if (studyInstanceUID === undefined) {\n      console.error('Study Instance UID is required for retrieval of series metadata')\n    }\n    if (seriesInstanceUID === undefined) {\n      console.error('Series Instance UID is required for retrieval of series metadata')\n    }\n    const url = this.baseURL +\n              '/studies/' + studyInstanceUID +\n              '/series/' + seriesInstanceUID +\n              '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Searches for DICOM instances.\n   * @param {Object} options optional DICOM identifiers (choices: \"studyInstanceUID\", \"seriesInstanceUID\")\n   * @param {Object} queryParams optional query parameters (choices: \"fuzzymatching\", \"offset\", \"limit\" or any valid DICOM attribute identifier)\n   * @returns {Array} instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n   */\n  searchForInstances(options={}, queryParams={}) {\n    let url = this.baseURL;\n    if ('studyInstanceUID' in options) {\n      url += '/studies/' + options.studyInstanceUID;\n      if ('seriesInstanceUID' in options) {\n        console.log(`search for instances of series ${options.seriesInstanceUID}`);\n        url += '/series/' + options.seriesInstanceUID;\n      } else {\n        console.error('study needs to be specified when searching for instances of a given series');\n      }\n    } else {\n      console.log('search for instances');\n    }\n    url += '/instances';\n    if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n    }\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves metadata for a DICOM instance.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @param {String} sopInstanceUID SOP Instance UID\n   * @returns {Object} metadata elements in DICOM JSON format\n   */\n  retrieveInstanceMetadata(studyInstanceUID, seriesInstanceUID, sopInstanceUID) {\n    console.log(`retrieve metadata of instance ${sopInstanceUID}`);\n    if (studyInstanceUID === undefined) {\n      console.error('Study Instance UID is required for retrieval of instance metadata')\n    }\n    if (seriesInstanceUID === undefined) {\n      console.error('Series Instance UID is required for retrieval of instance metadata')\n    }\n    if (sopInstanceUID === undefined) {\n      console.error('SOP Instance UID is required for retrieval of instance metadata')\n    }\n    const url = this.baseURL +\n              '/studies/' + studyInstanceUID +\n              '/series/' + seriesInstanceUID +\n              '/instances/' + sopInstanceUID +\n              '/metadata';\n    return(this._httpGetApplicationJson(url));\n  }\n\n  /**\n   * Retrieves frames for a DICOM instance.\n   * @param {String} studyInstanceUID Study Instance UID\n   * @param {String} seriesInstanceUID Series Instance UID\n   * @param {String} sopInstanceUID SOP Instance UID\n   * @param {Array} frameNumbers one-based index of frames\n   * @param {Object} options options (key \"imageSubtype\" to specify MIME image subtypes)\n   * @returns {Array} frame items as byte arrays of the pixel data element\n   */\n  retrieveInstanceFrames(studyInstanceUID, seriesInstanceUID, sopInstanceUID, frameNumbers, options={}) {\n    console.log(`retrieve frames ${frameNumbers.toString()} of instance ${sopInstanceUID}`);\n    if (studyInstanceUID === undefined) {\n      console.error('Study Instance UID is required for retrieval of instance frames')\n    }\n    if (seriesInstanceUID === undefined) {\n      console.error('Series Instance UID is required for retrieval of instance frames')\n    }\n    if (sopInstanceUID === undefined) {\n      console.error('SOP Instance UID is required for retrieval of instance frames')\n    }\n    if (frameNumbers === undefined) {\n      console.error('frame numbers are required for retrieval of instance frames')\n    }\n    const url = this.baseURL +\n              '/studies/' + studyInstanceUID +\n              '/series/' + seriesInstanceUID +\n              '/instances/' + sopInstanceUID +\n              '/frames/' + frameNumbers.toString();\n    options.imageSubtype = options.imageSubtype || undefined;\n    var func = this._httpGetApplicationOctetStream;\n    if (options.imageSubtype) {\n        if (options.imageSubtype === 'jpeg') {\n            func = this._httpGetImageJpeg;\n        } else if (options.imageSubtype === 'x-jls') {\n            func = this._httpGetImageJpeg2000;\n        } else if (options.imageSubtype === 'jp2') {\n            func = this._httpGetImageJpeg2000;\n        } else {\n            console.error(`MIME type \"image/${options.imageSubtype}\" is not supported`)\n        }\n    }\n\n    // FIXME\n    return(this._httpGetImageJpeg(url).then((response) => {\n      const message = new Uint8Array(response);\n\n      // First look for the multipart mime header\n      let separator = stringToUint8Array('\\r\\n\\r\\n');\n      const headerIndex = findToken(message, separator);\n      if (headerIndex === -1) {\n        console.error('response message has no multipart mime header');\n      }\n      const header = uint8ArrayToString(message, 0, headerIndex);\n\n      const boundary = identifyBoundary(header);\n      if (!boundary) {\n        console.error('header of response message does not specify boundary');\n      }\n\n      var frames = [];\n      var offset = headerIndex + separator.length;\n      for (let i = 0; i < frameNumbers.length; i++) {\n        let boundaryIndex = findToken(message, boundary, offset);\n        let length = boundaryIndex - offset - 2; // exclude \"\\r\\n\"\n\n        // Extract pixel data from response message\n        let pixels = response.slice(offset, offset + length);\n        frames.push(pixels);\n\n        offset += length + 2;\n      }\n      return frames;\n\n    }));\n  }\n\n  /**\n   * Stores DICOM instances.\n   * @param {String} studyInstanceUID Study Instance UID (optional)\n   */\n  storeInstances(studyInstanceUID) {\n    let url = this.baseURL;\n    if (studyInstanceUID !== undefined) {\n      url += '/studies/' + studyInstanceUID;\n    }\n    console.error('storing instances is not yet implemented')\n  }\n\n}\n\nexport { DICOMwebClient };\n","function findSubstring(str, before, after) {\n    const beforeIndex = str.lastIndexOf(before) + before.length;\n    if (beforeIndex < before.length) {\n        console.warn(`substring not found in \"${str}\"`)\n        return(null);\n    }\n    if (after !== undefined) {\n        const afterIndex = str.lastIndexOf(after);\n        if (afterIndex < 0) {\n            console.warn(`substring not found in \"${str}\"`)\n            return(null);\n        } else{\n            return(str.substring(beforeIndex, afterIndex));\n        }\n    }\n    return(str.substring(beforeIndex));\n}\n\n\nfunction getStudyInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, \"studies/\", \"/series\");\n  if (!uid) {\n    var uid = findSubstring(uri, \"studies/\");\n  }\n  if (!uid) {\n    console.warn('Study Instance UID could not be dertermined from URI \"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getSeriesInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, \"series/\", \"/instances\");\n  if (!uid) {\n    var uid = findSubstring(uri, \"series/\");\n  }\n  if (!uid) {\n    console.warn('Series Instance UID could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getSOPInstanceUIDFromUri(uri) {\n  var uid = findSubstring(uri, \"/instances/\", \"/frames\");\n  if (!uid) {\n    var uid = findSubstring(uri, \"/instances/\", \"/metadata\");\n  }\n  if (!uid) {\n    var uid = findSubstring(uri, \"/instances/\");\n  }\n  if (!uid) {\n    console.warn('SOP Instance UID could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(uid);\n}\n\n\nfunction getFrameNumbersFromUri(uri) {\n  let numbers = findSubstring(uri, \"/frames/\");\n  if (numbers === undefined) {\n    console.warn('Frames Numbers could not be dertermined from URI\"' + uri + '\"');\n  }\n  return(numbers.split(','));\n}\n\n\nexport {\n  getStudyInstanceUIDFromUri, getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri, getFrameNumbersFromUri\n};\n","import { DICOMwebClient } from './api.js';\nimport { \n  getStudyInstanceUIDFromUri, getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri, getFrameNumbersFromUri\n} from './utils.js';\n\nlet api = {\n  DICOMwebClient,\n};\nlet utils = {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri\n};\n\nexport { api, utils };\n"],"names":[],"mappings":"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"}